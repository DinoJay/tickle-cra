import React from 'react';
import { Card } from '~/constants/cardFields';
import { User } from '~/constants/userFields';
import UserEnv from '~/constants/userEnvType';
import Event from '~/constants/eventType';
import AuthUser from '~/constants/authUserType';
import { UpdateRewardType, RemoveRewardType, FetchRewardsType, UpdateTopicType, RemoveTopicType } from '~/reducers/Cards/async_actions';
import Topic from '~/constants/topicType';
import Reward from '~/constants/rewardType';
declare const _default: React.FC<{
    updateReward: UpdateRewardType;
    removeReward: RemoveRewardType;
    fetchRewards: FetchRewardsType;
    updateTopic: UpdateTopicType;
    removeTopic: RemoveTopicType;
    userEnvId: string;
    fetchUsers: () => User[];
    cards: Card[];
    templateCard: Card;
    fetchTopics: (userEnv: string) => any;
    height: number;
    fetchAllEnvs: () => UserEnv[];
    addUser: Function;
    updateUser: Function;
    selectUser: Function;
    envs: UserEnv[];
    users: User[];
    events: Event[];
    fetchAllUserEvents: Function;
    registerUserToEnv: Function;
    removeUserFromEnv: Function;
    width: number;
    updateAuthUser: Function;
    authUser: AuthUser;
    asyncUpdateCard: ({ cardData, userEnvId }: {
        cardData: Card;
        userEnvId: string;
    }) => any;
    userLocation: {
        latitude: number;
        longitude: number;
    };
    fetchAllCardsWithSubmissions: (userEnvId: string) => any;
    fetchCardTemplates: (userEnvId: string) => any;
    createEnv: (u: UserEnv) => any;
    removeEnv: (s: string) => any;
    changeUserEnv: (u: UserEnv) => any;
    topicDict: Topic[];
    rewards: Reward[];
}>;
export default _default;
